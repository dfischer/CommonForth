// ////////////////////////////////////////////////////////////////////////
// Utility words for MetaForth 1.0      // Version 1.0
					// 02/03/'96 .. 02/03/'96

: BACKCF $1462C4 >R ;   // Back to loader's QUIT
: CELLS  CELL* ;
: CELL-  4 - ;
: TUCK   SWAP OVER ;
: ENDIF  \ THEN ; IMMEDIATE
: U.R    ( u +n -- ) >R <# #S #> R> OVER - SPACES TYPE ;
: U.     ( u -- )    <# #S #> TYPE SPACE ;
: .ZEROS ( +n -- )   0 MAX FOR AFT [ CHAR 0 ] LITERAL EMIT THEN NEXT ;
: U.0R   ( n +n -- ) >R <# #S #> R> OVER - .ZEROS TYPE ;
: .H     ( n -- )    BASE @ HEX SWAP . BASE ! ;
: U.H    ( n -- )    BASE @ HEX SWAP U. BASE ! ;
: ?      ( a -- )    @ . ;
: >CHAR  ( c -- c )  DUP $FF BL WITHIN IF  DROP [ CHAR _ ] LITERAL  THEN ;
: _TYPE  ( b u -- )  FOR AFT  DUP C@ >CHAR EMIT 1+  THEN NEXT DROP ;
: dm+    ( a u -- a ) OVER [ CELL 2* ] LITERAL U.R SPACE
	 FOR AFT  DUP C@ SPACE 2 U.0R 1+  THEN NEXT ;
: DUMP   ( a u -- ) // Dump u bytes from a, in a formatted manner.
	 BASE @ >R HEX // Save radix, set hex
	 $10 / FOR
	     CR $10 2DUP dm+ -ROT 2 SPACES _TYPE
	 NEXT
	 DROP R> BASE ! ;
: FORGET ( -- )  ' >NAME DUP DP ! NAME> >LINK @ DUP CURR ! LAST ! ;
: EXIT   ['] exit compile, ; IMMEDIATE
: TRUE   -1 ;M          : FALSE  0 ;M
: ON     TRUE SWAP ! ;   : OFF  FALSE SWAP ! ;
: BEEP   7 EMIT ;
: CRASH  TRUE ABORT" Uninitialized vector" ;
: DEFER  CREATE ['] CRASH , DOES> @EXECUTE ;
  VARIABLE (STATE)
: STATE  'EVAL @ ['] $COMPILE = (STATE) ! (STATE) ;
: ASCII  CHAR STATE @ IF \ LITERAL THEN ; IMMEDIATE
: IS     STATE @ IF  
	    ' >BODY \ LITERAL COMPILE !  
	 ELSE  
	    ' >BODY !  
	 THEN ; IMMEDIATE
: TOKEN  BL WORD ;
: VALUE  CREATE , DOES> @ ;
: $+     ( target$ src len -- target$ )
	 ROT >R R@ C@ 2DUP + R@ C!  R@ + 1+ SWAP CMOVE R> ;
: TRANSLATE ( buf len -- T/F )
	>IN @ >R #TIB @ >R TIB >R SPAN @ >R
	DUP #TIB ! SPAN ! TIB0 ! >IN OFF
	['] EVAL CATCH
	R> SPAN ! R> TIB0 ! R> #TIB ! R> >IN ! ;

// ////////////////////////////////////////////////////////////////////////
// CASE ... OF ... ENDOF ... ENDCASE control structure           Luke Lee.
//  Implement this control structure by IF ... ELSE ... ENDIF

: CASE  -1 ; IMMEDIATE
: OF    COMPILE OVER COMPILE = \ IF COMPILE DROP ; IMMEDIATE
: ENDOF \ ELSE ; IMMEDIATE
: ENDCASE
	COMPILE DROP
	BEGIN DUP -1 <> WHILE \ ENDIF REPEAT DROP ; IMMEDIATE

// Note that ENDCASE will compile a DROP.

// ////////////////////////////////////////////////////////////////////////
// DO LOOP in high level                         Written by Luke Lee

: (DO)  ( limit init -- )
	R> DUP @ >R CELL+ -ROT SWAP >R >R >R ;
: (?DO) ( limit init -- )
	2DUP = IF
	   2DROP R> @ >R EXIT 
	ELSE
	   R> DUP @ >R CELL+ -ROT SWAP >R >R >R 
	THEN ;
: (LOOP)
	R>
	R> 1+   DUP R@ = IF // index = limit
	   2DROP RDROP EXIT
	ELSE
	   >R @ >R
	THEN ;
: (+LOOP)    ( n -- )
	 R> SWAP
	 R> +   DUP R@ >= IF
	    2DROP RDROP EXIT
	 ELSE
	    >R @ >R
	 THEN ;
: (LEAVE)       // left leaving address on top of return address
	 RDROP    RDROP RDROP ;
: (?LEAVE)
	 IF RDROP   RDROP RDROP THEN ;
: #I     R@ ;M
: #J     ( -- inner_loop_index )        RP@ [ 3 CELLS ] LITERAL + @ ;
: #K     ( -- third_loop_index )        RP@ [ 6 CELLS ] LITERAL + @ ;
: DO     ( -- HERE0 )   COMPILE (DO) 0 , HERE ; IMMEDIATE
: ?DO    ( -- HERE0 )   COMPILE (?DO) 0 , HERE ; IMMEDIATE
: xLOOP  ( HERE0 x -- )
	 IF   COMPILE (+LOOP)   ELSE   COMPILE (LOOP)   THEN
	 DUP ,    HERE  SWAP CELL-  ! ;
: LOOP   ( HERE0 -- )  FALSE xLOOP ; IMMEDIATE
: +LOOP  ( HERE0 -- )  TRUE  xLOOP ; IMMEDIATE
: LEAVE  ( HERE0 -- HERE0 )  COMPILE (LEAVE) ; IMMEDIATE
: ?LEAVE ( HERE0 -- HERE0 )  COMPILE (?LEAVE) ; IMMEDIATE

// ///////////////////////////////////////////////////
// Short cut boolean evaluation, portable version 

VARIABLE ANDTHEN-STARTED        VARIABLE ORELSE-STARTED
: ?EXPECT-THEN-AND ( #count -- #count )  DUP 0> ABORT"  THEN-AND expected " ;
: ?EXPECT-ELSE-OR  ( #count -- #count )  DUP 0< ABORT"  ELSE-OR expected " ;
: REANDTHEN  ANDTHEN-STARTED OFF ; IMMEDIATE
: ANDTHENED  ANDTHEN-STARTED ON ; IMMEDIATE
: ANDTHEN  // ( -- A +#count ) or ( A +#count -- A A' +#count )
	ANDTHEN-STARTED @ IF
	    >R
	    COMPILE DUP \ IF COMPILE DROP
	    R> 1+  // 'IF' may returns more than 1 value
	ELSE
	   -1 ANDTHEN-STARTED !
	   COMPILE DUP \ IF COMPILE DROP 1
	THEN  ; IMMEDIATE
: THEN-AND // ( A0 A1 A2 ... +#count -- )
	?EXPECT-ELSE-OR         // prevent misuse of THEN-AND
	0 ANDTHEN-STARTED !
	0 ?DO \ THEN LOOP  ; IMMEDIATE
: REORELSE  ORELSE-STARTED OFF ; IMMEDIATE
: ORELSED   ORELSE-STARTED ON ; IMMEDIATE
: ORELSE  // ( -- A #count ) or ( A #count -- A A' #count )
	ORELSE-STARTED @ IF
	    >R
	    COMPILE DUP COMPILE NOT \ IF COMPILE DROP
	    R> 1-
	ELSE
	    -1 ORELSE-STARTED !
	    COMPILE DUP COMPILE NOT \ IF COMPILE DROP -1
	THEN  ; IMMEDIATE
: ELSE-OR  // ( A0 A1 A2 ... -#count -- )
	?EXPECT-THEN-AND        // prevent misuse of ELSE-OR
	0 ORELSE-STARTED !
	0 SWAP ?DO \ THEN LOOP  ; IMMEDIATE
: :     0 DUP ANDTHEN-STARTED ! ORELSE-STARTED !  :       ;

