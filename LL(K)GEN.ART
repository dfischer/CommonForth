// LL(K) Grammar Compiler  	// Written by  : Luke Lee  		//
			   	// Version     : Art       09/24/'95	//
DEFER GetToken	CREATE ThisToken 128 ALLOT
: (GetToken)	TOKEN DUP ThisToken 128 CMOVE ;	' (GetToken) IS GetToken
: STR"	   	HERE  $,"  ;
: $=	   	DUP C@ 1+ COMP 0=  ;
: PUSH>IN  	R> >IN @ >R >R   ;
: ?POP>IN  	R> SWAP ORELSE  R@ >IN ! FALSE  ELSE-OR  RDROP SWAP >R ;
: TokenMatch?	PUSH>IN  GetToken  $=  ?POP>IN  ;
: LAMBDA	; IMMEDIATE
: T:	>R \ : OVERT \ ANDTHEN R> \ LITERAL COMPILE TokenMatch? ;
: ;T	\ THEN-AND  \ ;	 ; IMMEDIATE
: {   	\ REANDTHEN \ ANDTHEN ; IMMEDIATE  // action routine
: }   	COMPILE TRUE \ THEN-AND \ ANDTHENED ; IMMEDIATE
: [[ 	; IMMEDIATE	
: ]]	COMPILE DROP COMPILE TRUE ; IMMEDIATE
: {{	\ [[ \ BEGIN  ; IMMEDIATE
: }}	COMPILE DUP COMPILE NOT \ UNTIL \ ]]  ; IMMEDIATE
: P:	\ : OVERT \ ANDTHEN COMPILE PUSH>IN COMPILE FALSE ;
: ->	COMPILE ?POP>IN \ ORELSE COMPILE PUSH>IN COMPILE TRUE ; IMMEDIATE
: ;P	COMPILE ?POP>IN \ ELSE-OR \ THEN-AND \ ;              ; IMMEDIATE

